<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring 0 到 1 (1) - 创建项目</title>
      <link href="/2019/05/09/Spring-0-%E5%88%B0-1-1-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/05/09/Spring-0-%E5%88%B0-1-1-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Debian 9</li><li>JDK 11</li><li>MAVEN</li><li>SDKMAN!</li><li>Spring Boot CLI</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>更新 <code>Spring Boot CLI</code></p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk ug springboot<br></code></pre></td></tr></table></figure></li><li><p>创建 <code>Spring Boot</code> 项目</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">spring init -a spring-scratch -g cn.tuzkimo -n spring-scratch -j 11 spring-scratch<br></code></pre></td></tr></table></figure></li><li><p>运行项目</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> spring-scratch/<br>mvn spring-boot:run<br></code></pre></td></tr></table></figure></li><li><p>看到 <code>BUILD SUCCESS</code> 说明项目构建成功</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Spring Boot 加 i18n 实现 enum 多语言</title>
      <link href="/2019/01/11/%E7%94%A8-Spring-Boot-%E5%8A%A0-i18n-%E5%AE%9E%E7%8E%B0-enum-%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
      <url>/2019/01/11/%E7%94%A8-Spring-Boot-%E5%8A%A0-i18n-%E5%AE%9E%E7%8E%B0-enum-%E5%A4%9A%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在平常开发中，为了对接前端的表单的单选组件的选项，我通常会用 enum 作为对应参数。最近项目需要升级为多语言，我分享一下我的实现方法。</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在终端用 spring-cli 快速生成。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ spring init -d=web enum-i18n<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>先在 resources 路径新建两个 ResourceBundle 配置文件，分别对应简体中文和英文。</p><figure class="hljs highlight plain"><figcaption><span>status_zh_CN.properties </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties">NEW = 新建<br>COMPLETED = 完成<br>CANCEL = 取消<br></code></pre></td></tr></table></figure><figure class="hljs highlight plain"><figcaption><span>status_en.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties">NEW = new<br>COMPLETED = completed<br>CANCEL = cancel<br></code></pre></td></tr></table></figure><a id="more"></a><p>然后在应用配置文件指定默认 locale 为 <code>zh_CN</code>, 其实这里还有一个 <code>locale-resolver</code> 配置项用来指定解释 locale 的默认方式，但由于默认配置就是 <code>accept-header</code>, 已经符合需求了，就不用显式配置了。</p><figure class="hljs highlight yml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  mvc:</span><br><span class="hljs-attr">    locale:</span> <span class="hljs-string">zh_CN</span><br></code></pre></td></tr></table></figure><h2 id="DOMAIN"><a href="#DOMAIN" class="headerlink" title="DOMAIN"></a>DOMAIN</h2><p>接下来是 enum 文件，跟普通的比就是多了对 <code>toString()</code> 方法的重写。这里通过调用 <code>LocaleContext</code> 的 locale 属性，动态匹配需要显示的名称。</p><figure class="hljs highlight java"><figcaption><span>Status.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.enumi18n;<br><br><span class="hljs-keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Status &#123;<br>    NEW, COMPLETED, CANCEL;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        Locale locale = LocaleContextHolder.getLocale();<br>        ResourceBundle bundle = ResourceBundle.getBundle(<span class="hljs-string">"status"</span>, locale);<br>        <span class="hljs-keyword">return</span> bundle.getString(<span class="hljs-keyword">this</span>.name());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CONTROLLER"><a href="#CONTROLLER" class="headerlink" title="CONTROLLER"></a>CONTROLLER</h2><p>然后是 rest controller，这里我们遍历所有的 status 并把他们转换为 name 为键，显示名为 value 的 map, 其中显示名可以根据传入的 <code>Accept-Language</code> header 切换为对应语言的名字。</p><figure class="hljs highlight java"><figcaption><span>StatusController.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.enumi18n;<br><br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatusController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"status"</span>)<br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;?&gt; getAllAvailableStatus() &#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<br>                Arrays<br>                        .stream(Status.values())<br>                        .collect(Collectors.toMap(Enum::name, Status::toString))<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>最后我们把项目跑起来测试一下，以下是测试效果。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X GET <span class="hljs-string">'http://localhost:8080/api/status'</span><br>-&gt; &#123;<span class="hljs-string">"NEW"</span>:<span class="hljs-string">"新建"</span>,<span class="hljs-string">"COMPLETED"</span>:<span class="hljs-string">"完成"</span>,<span class="hljs-string">"CANCEL"</span>:<span class="hljs-string">"取消"</span>&#125;<br></code></pre></td></tr></table></figure><p>由于指定了默认 locale 是简体中文，所以不指定 <code>Accept-Language</code> 头的情况下默认显示中文。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X GET -H <span class="hljs-string">'Accept-Language: en'</span> <span class="hljs-string">'http://localhost:8080/api/status'</span><br>-&gt; &#123;<span class="hljs-string">"NEW"</span>:<span class="hljs-string">"new"</span>,<span class="hljs-string">"COMPLETED"</span>:<span class="hljs-string">"completed"</span>,<span class="hljs-string">"CANCEL"</span>:<span class="hljs-string">"cancel"</span>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X GET -H <span class="hljs-string">'Accept-Language: zh-CN'</span> <span class="hljs-string">'http://localhost:8080/api/status'</span><br>-&gt; &#123;<span class="hljs-string">"NEW"</span>:<span class="hljs-string">"新建"</span>,<span class="hljs-string">"COMPLETED"</span>:<span class="hljs-string">"完成"</span>,<span class="hljs-string">"CANCEL"</span>:<span class="hljs-string">"取消"</span>&#125;<br></code></pre></td></tr></table></figure><p>这里有个坑浪费了我很多时间，在 http 头的 <code>Accept-Language</code> 头信息语言代码和地区代码中间是用 <code>-</code> 不是 <code>_</code> 分开的，跟 JAVA 的不一样。</p><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/tuzkimo/enum-i18n" target="_blank" rel="noopener">https://github.com/tuzkimo/enum-i18n</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> i18n </tag>
            
            <tag> enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Spring Boot, MySQL, Spring Data JPA 构建 RESTful CRUD API</title>
      <link href="/2018/08/21/%E7%94%A8-Spring-Boot-MySQL-Spring-Data-JPA-%E6%9E%84%E5%BB%BA-RESTful-CRUD-API/"/>
      <url>/2018/08/21/%E7%94%A8-Spring-Boot-MySQL-Spring-Data-JPA-%E6%9E%84%E5%BB%BA-RESTful-CRUD-API/</url>
      
        <content type="html"><![CDATA[<blockquote><p>做后端开发最经常做的就是 CRUD，这次我会用 Spring Boot 做一个超简单的 RESTful CRUD API。</p></blockquote><h2 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli" target="_blank" rel="noopener">Spring Boot CLI</a></li><li><a href="https://maven.apache.org/install.html" target="_blank" rel="noopener">Maven</a></li><li><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Docker</a></li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>打开 <strong>Terminal</strong> 并切换到你想存放项目文件的目录；</li><li><p>执行以下命令创建项目：</p> <figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ spring init -a note --name note-demo-api -d=web,data-jpa,mysql,lombok,devtools note<br></code></pre></td></tr></table></figure></li><li><p>导入 IDE。</p><blockquote><p><strong>注意</strong> Lombok 用于消除一些模板代码，需要 IDE 安装插件提供支持，具体请看<a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">官方文档</a>。</p></blockquote></li></ol><a id="more"></a><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>首先我们要在 MySQL 创建一个名叫 <strong>note</strong> 的数据库。出于简化目的，这一步用 docker 运行一个一次性的 MySQL 容器。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>    --rm \<br>    -d \<br>    -p 3306:3306 \<br>    --name note_db \<br>    --env MYSQL_ROOT_PASSWORD=p123456 \<br>    --env MYSQL_DATABASE=note \<br>    mysql:5.7 \<br>    --character-set-server=utf8mb4 \<br>    --collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><p>接着配置数据源相关参数。为了使用 <strong>yml</strong> 格式，首先把 <strong>application.properties</strong> 文件的后缀名改为 <strong>yml</strong>，然后打开填入以下内容：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源参数</span><br><span class="hljs-attr">  datasource:</span><br><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/note?useSSL=false</span><br><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    password:</span> <span class="hljs-string">p123456</span><br><br>  <span class="hljs-comment"># JPA/Hibernate 参数</span><br><span class="hljs-attr">  jpa:</span><br><span class="hljs-attr">    hibernate:</span><br>      <span class="hljs-comment"># 指定数据库初始化方式，有 create, create-drop, update, validate 四种方式可选</span><br><span class="hljs-attr">      ddl-auto:</span> <span class="hljs-string">update</span><br><br><span class="hljs-attr">    properties:</span><br><span class="hljs-attr">      hibernate:</span><br>        <span class="hljs-comment"># 指定 Dialect 可以让 Hibernate 根据对应的数据库生成性能更好的 SQL 语句</span><br><span class="hljs-attr">        dialect:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><br></code></pre></td></tr></table></figure><h2 id="创建-Note-Model"><a href="#创建-Note-Model" class="headerlink" title="创建 Note Model"></a>创建 Note Model</h2><p>在 <code>com.example.note</code> 里面新建包 <code>model</code>，然后在里面新建类 <code>Note.java</code> 并输入以下内容：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.note.model;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> org.springframework.data.annotation.CreatedDate;<br><span class="hljs-keyword">import</span> org.springframework.data.annotation.LastModifiedDate;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.domain.support.AuditingEntityListener;<br><br><span class="hljs-keyword">import</span> javax.persistence.*;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotBlank;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@EntityListeners</span>(AuditingEntityListener.class)<br><span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"createdAt"</span>, <span class="hljs-string">"updatedAt"</span>&#125;,<br>        allowGetters = <span class="hljs-keyword">true</span>)<br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Note</span> </span>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>, updatable = <span class="hljs-keyword">false</span>)<br>    <span class="hljs-meta">@Temporal</span>(TemporalType.TIMESTAMP)<br>    <span class="hljs-meta">@CreatedDate</span><br>    <span class="hljs-keyword">private</span> Date createdAt;<br><br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>)<br>    <span class="hljs-meta">@Temporal</span>(TemporalType.TIMESTAMP)<br>    <span class="hljs-meta">@LastModifiedDate</span><br>    <span class="hljs-keyword">private</span> Date updatedAt;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Entity</code> 用于标记这是一个持久化类；</li><li><code>@Id</code> 用于标记主键；</li><li><code>@GeneratedValue</code> 用于定义主键生成策略，上面的策略对应 MySQL 的 <code>auto_increment</code>；</li><li><code>@NotBlank</code> 用于验证字符串非空及 <code>not null</code>；</li><li><code>@Column</code> 用于定义被标记的 field 映射的数据表列的参数。可以定义名称（name）、长度（length）、可否为 null（nullable）及可否更新（updateable）等参数；</li><li><code>@Temporal</code> 用于标记类型为 <code>java.util.Date</code> 和 <code>java.util.Calendar</code> 的 field。<code>TemporalType.DATE</code> 表示只取日期，<code>TemporalType.TIME</code> 表示只取时间，<code>TemporalType.TIMESTAMP</code> 则表示取完整的日期时间；</li><li><code>@JsonIgnoreProperties</code> 是一个 Jackson 注解。Spring Boot 默认使用 Jackson 序列化实体为 JSON，或者把 JSON 反序列化为实体。该注解用于指定哪些 field 不参与序列化与反序列化。<code>allowGetters</code> 用于控制是否参与序列化，<code>allowSetters</code> 用于控制是否参与反序列化；</li></ul><h2 id="启用-JPA-Auditing"><a href="#启用-JPA-Auditing" class="headerlink" title="启用 JPA Auditing"></a>启用 JPA Auditing</h2><p>为了让 <code>createdAt</code> 和 <code>updatedAt</code> 这两个 field 可以在 model 创建和更新的时候自动生成，分别给它们添加了 <code>@CreatedDate</code> 和 <code>@LastModifiedDate</code> 注解。</p><p>为了让这两个注解生效，还需要进行两个配置：</p><ol><li>给 model 添加 Spring Data JPA 的 <code>AuditingEntityListener</code>。在上一步已经通过给 <code>Note</code> model 添加 <code>@EntityListeners(AuditingEntityListener.class)</code> 注解实现了；</li><li>在主程序启用 JPA Auditing。这一步要在 <code>NoteDemoApiApplication.java</code> 添加 <code>@EnableJpaAuditing</code> 注解。</li></ol><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.note;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaAuditing;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableJpaAuditing</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoteDemoApiApplication</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(NoteDemoApiApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建-NoteRepository-获取数据库数据"><a href="#创建-NoteRepository-获取数据库数据" class="headerlink" title="创建 NoteRepository 获取数据库数据"></a>创建 NoteRepository 获取数据库数据</h2><p>Spring Data JPA 自带一个 <code>JpaRepository</code> 接口，里面已经预定义了很多基本的数据库增删改查（CRUD）的方法，该接口有一个默认的实现类 <code>SimpleJpaRepository</code>，所以我们只要继承 <code>JpaRepository</code> 就可以快速生成自己的 repository 接口。</p><p>首先在 <code>com.example.note</code> 里面新建包 <code>repository</code>，然后在里面新建接口 <code>NoteRepository.java</code> 并输入以下内容：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.note.repository;<br><br><span class="hljs-keyword">import</span> com.example.note.model.Note;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NoteRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Note</span>, <span class="hljs-title">Long</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Repository</code> 用于标记这是一个 Repository；</li><li>继承 <code>JpaRepository</code> 需要提供对应的 model 和主键的类型。</li></ul><h2 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h2><p>用户访问 API 获取一些不存在的资源的时候通常会抛出 <code>404</code> 异常，默认的异常返回信息不太友好，这里我们自己定义一个。</p><p>在 <code>com.example.note</code> 里面新建包 <code>exception</code>，然后在里面新建类 <code>ResourceNotFoundException.java</code> 并输入以下内容：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined">package com.example.note.exception;<br><br>import lombok.Getter;<br>import org.springframework.http.HttpStatus;<br>import org.springframework.web.bind.annotation.ResponseStatus;<br><br>@ResponseStatus(HttpStatus.NOT_FOUND)<br>@Getter<br>public class ResourceNotFoundException extends RuntimeException &#123;<br>    private String resourceName;<br>    private String fieldName;<br>    private String fieldValue;<br><br>    public ResourceNotFoundException(String s, String resourceName, String fieldName, String fieldValue) &#123;<br>        super(String.format(&quot;找不到 %s 为 %s 的 %s&quot;, fieldName, fieldValue, resourceName));<br>        this.resourceName = resourceName;<br>        this.fieldName = fieldName;<br>        this.fieldValue = fieldValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@ResponseStatus</code> 定义当该异常在控制器抛出的时候返回给客户端的 HTTP 状态</li></ul><h2 id="创建-NoteController"><a href="#创建-NoteController" class="headerlink" title="创建 NoteController"></a>创建 NoteController</h2><p>最后一步，我们要创建对笔记进行增删改查的 API。</p><p>首先，在 <code>com.example.note</code> 里面新建包 <code>controller</code>，然后在里面新建类 <code>NoteController.java</code> 并输入以下内容：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.note.controller;<br><br><span class="hljs-keyword">import</span> com.example.note.repository.NoteRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api/note"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoteController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NoteRepository noteRepository;<br><br>    <span class="hljs-comment">// 获取笔记列表</span><br><br>    <span class="hljs-comment">// 新建笔记</span><br><br>    <span class="hljs-comment">// 获取单个笔记</span><br><br>    <span class="hljs-comment">// 更新笔记</span><br><br>    <span class="hljs-comment">// 删除笔记</span><br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@RestController</code> 是 <code>@Controller</code> 和 <code>@ResponseBody</code> 的合体。<code>@Controller</code> 用于标记这是一个控制器，<code>@ResponseBody</code> 表示该类下面所有的方法的返回都会被默认的格式转换器（默认是 Jackson）序列化为 JSON；</li><li><code>@RequestMapping(&quot;/api/note&quot;)</code> 表示该控制器下定义的所有 API 的 URL 都是 <code>/api/note</code> 开头的。</li></ul><p>下面，我们把 API 逐个完成。</p><h3 id="1-获取所有笔记（GET-api-note）"><a href="#1-获取所有笔记（GET-api-note）" class="headerlink" title="1. 获取所有笔记（GET /api/note）"></a>1. 获取所有笔记（GET /api/note）</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取笔记列表</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Note&gt; <span class="hljs-title">getAllNotes</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> noteRepository.findAll();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@GetMapping</code> 是 <code>@RequestMapping(value = &quot;&quot;, method = RequestMethod.GET)</code> 的简写。</li></ul><h3 id="2-新建笔记（POST-api-note）"><a href="#2-新建笔记（POST-api-note）" class="headerlink" title="2. 新建笔记（POST /api/note）"></a>2. 新建笔记（POST /api/note）</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 新建笔记</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createNote</span><span class="hljs-params">(@Valid @RequestBody Note note)</span> </span>&#123;<br>    noteRepository.save(note);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@PostMapping</code> 是 <code>@RequestMapping(value = &quot;&quot;, method = RequestMethod.POST)</code> 的简写；</li><li><code>@RequestBody</code> 表示该 API 接收到的 HTTP 数据体会被反序列化为标记的 model 类型；</li><li><code>@Valid</code> 表示提交的数据需要验证，之前在 <code>Note</code> model 使用的 <code>@NotBlank</code> 就是验证规则，如果验证不通过，就会返回 <code>400 BadRequest</code> 状态给客户端。</li></ul><h3 id="3-获取单个笔记（GET-api-note-noteId-）"><a href="#3-获取单个笔记（GET-api-note-noteId-）" class="headerlink" title="3. 获取单个笔记（GET /api/note/{noteId}）"></a>3. 获取单个笔记（GET /api/note/{noteId}）</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取笔记</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Note <span class="hljs-title">getNoteById</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long noteId) </span>&#123;<br>    <span class="hljs-keyword">return</span> noteRepository.findById(noteId)<br>            .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> ResourceNotFoundException(<span class="hljs-string">"笔记"</span>, <span class="hljs-string">"ID"</span>, noteId));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@PathVariable</code> 用于把 URL 的一部分作为方法的参数，不指定名称则默认使用参数名；</li><li>由于 Spring Boot 2.X 的 Spring Data JPA 的 <code>findById()</code> 方法返回的是 <code>Optional</code> 对象，所以这里直接调用它的 <code>orElseThrow()</code> 方法，当检索数据库时找不到指定记录，就抛出一个 <code>ResourceNotFoundException</code> 异常。由于之前定义该异常时标记了 <code>@ResponseStatus(value = HttpStatus.NOT_FOUND)</code>，所以抛出该异常时客户端会收到 <code>404 Not Found</code> 错误。</li></ul><h3 id="4-更新笔记（PUT-api-note-noteId-）"><a href="#4-更新笔记（PUT-api-note-noteId-）" class="headerlink" title="4. 更新笔记（PUT /api/note/{noteId}）"></a>4. 更新笔记（PUT /api/note/{noteId}）</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// 更新笔记<br>@PutMapping(&quot;/&#123;id&#125;&quot;)<br>public Note updateNote(@PathVariable(&quot;id&quot;) Long noteId, @Valid @RequestBody Note noteDetail) &#123;<br>    Note note = noteRepository.findById(noteId)<br>            .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;笔记&quot;, &quot;ID&quot;, noteId));<br><br>    note.setTitle(noteDetail.getTitle());<br>    note.setContent(noteDetail.getContent());<br><br>    return noteRepository.save(note);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@PutMapping(&quot;/{id}&quot;)</code> 是 <code>@RequestMapping(value = &quot;/{id}&quot;, method = RequestMethod.PUT)</code> 的简写。</li></ul><h3 id="5-删除笔记（DELETE-api-note-noteId-）"><a href="#5-删除笔记（DELETE-api-note-noteId-）" class="headerlink" title="5. 删除笔记（DELETE /api/note/{noteId}）"></a>5. 删除笔记（DELETE /api/note/{noteId}）</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// 删除笔记<br>@DeleteMapping(&quot;/&#123;id&#125;&quot;)<br>public ResponseEntity&lt;?&gt; deleteNote(@PathVariable(&quot;id&quot;) Long noteId) &#123;<br>    Note note = noteRepository.findById(noteId)<br>            .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;笔记&quot;, &quot;ID&quot;, noteId));<br><br>    noteRepository.delete(note);<br><br>    return ResponseEntity.ok().build();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@DeleteMapping(&quot;/{id}&quot;)</code> 是 <code>@RequestMapping(value = &quot;/{id}&quot;, method = RequestMethod.DELETE)</code> 的简写。</li></ul><h2 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h2><p>我们的应用终于构建完成了，现在是时候运行起来了。</p><p>打开 <code>Terminal</code>，切换到项目路径，运行以下指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ mvn spring-boot:run<br></code></pre></td></tr></table></figure><p>应用顺利运行后默认会监听本地 <code>8080</code> 端口。</p><h2 id="测试-API"><a href="#测试-API" class="headerlink" title="测试 API"></a>测试 API</h2><h3 id="1-通过-POST-api-note-新建笔记"><a href="#1-通过-POST-api-note-新建笔记" class="headerlink" title="1. 通过 POST /api/note 新建笔记"></a>1. 通过 <code>POST /api/note</code> 新建笔记</h3><p>打开 <code>Terminal</code>，运行以下指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X POST -H <span class="hljs-string">"Content-Type: application/json"</span> -d <span class="hljs-string">'&#123;"title": "我的第一篇笔记", "content": "Spring Boot 真好用！"&#125;'</span> http://localhost:8080/api/note<br></code></pre></td></tr></table></figure><p>预期应该有类似如下返回：</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"title"</span>: <span class="hljs-string">"我的第一篇笔记"</span>,<br>    <span class="hljs-attr">"content"</span>: <span class="hljs-string">"Spring Boot 真好用！"</span>,<br>    <span class="hljs-attr">"createdAt"</span>: <span class="hljs-string">"2018-04-12T03:01:21.187+0000"</span>,<br>    <span class="hljs-attr">"updatedAt"</span>: <span class="hljs-string">"2018-04-12T03:01:21.187+0000"</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-通过-GET-api-note-获取笔记列表"><a href="#2-通过-GET-api-note-获取笔记列表" class="headerlink" title="2. 通过 GET /api/note 获取笔记列表"></a>2. 通过 <code>GET /api/note</code> 获取笔记列表</h3><p>首先按第一步的方法再新建一篇笔记，然后运行以下指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X GET http://localhost:8080/api/note<br></code></pre></td></tr></table></figure><p>预期应该有类似如下返回：</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">[&#123;<br>        <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"我的第一篇笔记"</span>,<br>        <span class="hljs-attr">"content"</span>: <span class="hljs-string">"Spring Boot 真好用！"</span>,<br>        <span class="hljs-attr">"createdAt"</span>: <span class="hljs-string">"2018-04-12T03:01:21.000+0000"</span>,<br>        <span class="hljs-attr">"updatedAt"</span>: <span class="hljs-string">"2018-04-12T03:01:21.000+0000"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"我的第二篇笔记"</span>,<br>        <span class="hljs-attr">"content"</span>: <span class="hljs-string">"用 Spring Boot 构建 RESTful 真方便！"</span>,<br>        <span class="hljs-attr">"createdAt"</span>: <span class="hljs-string">"2018-04-12T03:08:21.000+0000"</span>,<br>        <span class="hljs-attr">"updatedAt"</span>: <span class="hljs-string">"2018-04-12T03:08:21.000+0000"</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="3-通过-GET-api-note-noteId-获取单个笔记"><a href="#3-通过-GET-api-note-noteId-获取单个笔记" class="headerlink" title="3. 通过 GET /api/note/{noteId} 获取单个笔记"></a>3. 通过 <code>GET /api/note/{noteId}</code> 获取单个笔记</h3><p>运行以下指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X GET http://localhost:8080/api/note/1<br></code></pre></td></tr></table></figure><p>预期应该有类似如下返回：</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"title"</span>: <span class="hljs-string">"我的第一篇笔记"</span>,<br>    <span class="hljs-attr">"content"</span>: <span class="hljs-string">"Spring Boot 真好用！"</span>,<br>    <span class="hljs-attr">"createdAt"</span>: <span class="hljs-string">"2018-04-12T03:01:21.187+0000"</span>,<br>    <span class="hljs-attr">"updatedAt"</span>: <span class="hljs-string">"2018-04-12T03:01:21.187+0000"</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-通过-PUT-api-note-noteId-修改笔记"><a href="#4-通过-PUT-api-note-noteId-修改笔记" class="headerlink" title="4. 通过 PUT /api/note/{noteId} 修改笔记"></a>4. 通过 <code>PUT /api/note/{noteId}</code> 修改笔记</h3><p>运行以下指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X PUT -H <span class="hljs-string">"Content-Type: application/json"</span> -d <span class="hljs-string">'&#123;"title": "我的第二篇笔记", "content": "用 Spring Boot 构建 RESTful 真方便！Spring 一生推！"&#125;'</span> http://localhost:8080/api/note/2<br></code></pre></td></tr></table></figure><p>预期应该有类似如下返回：</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">"title"</span>: <span class="hljs-string">"我的第二篇笔记"</span>,<br>    <span class="hljs-attr">"content"</span>: <span class="hljs-string">"用 Spring Boot 构建 RESTful 真方便！Spring 一生推！"</span>,<br>    <span class="hljs-attr">"createdAt"</span>: <span class="hljs-string">"2018-04-12T03:08:21.000+0000"</span>,<br>    <span class="hljs-attr">"updatedAt"</span>: <span class="hljs-string">"2018-04-12T03:23:54.474+0000"</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-通过-DELETE-api-note-noteId-删除笔记"><a href="#5-通过-DELETE-api-note-noteId-删除笔记" class="headerlink" title="5. 通过 DELETE /api/note/{noteId} 删除笔记"></a>5. 通过 <code>DELETE /api/note/{noteId}</code> 删除笔记</h3><p>运行以下指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X DELETE http://localhost:8080/api/note/2<br></code></pre></td></tr></table></figure><p>预期应该没有错误返回，可以通过 <code>GET /api/note</code> API 进行验证，返回的列表应该只剩一个元素了。</p><h3 id="6-通过获取不存在的资源检验错误返回"><a href="#6-通过获取不存在的资源检验错误返回" class="headerlink" title="6. 通过获取不存在的资源检验错误返回"></a>6. 通过获取不存在的资源检验错误返回</h3><p>我们给 <code>GET /api/note/{noteId}</code> 故意传入一个不存在 <code>noteId</code>，如下：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -X GET http://localhost:8080/api/note/3<br></code></pre></td></tr></table></figure><p>预期应该有类似如下返回：</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"timestamp"</span>: <span class="hljs-string">"2018-04-12T03:34:52.630+0000"</span>,<br>    <span class="hljs-attr">"status"</span>: <span class="hljs-number">404</span>,<br>    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Not Found"</span>,<br>    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"找不到 ID 为 3 的 笔记"</span>,<br>    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/api/note/3"</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/tuzkimo/note-demo-api" target="_blank" rel="noopener">GitHub</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/" target="_blank" rel="noopener">Spring Boot, MySQL, JPA, Hibernate Restful CRUD API Tutorial</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造带 Java 内核的 Jupyter Notebook Docker 镜像</title>
      <link href="/2018/08/17/%E6%89%93%E9%80%A0%E5%B8%A6-Java-%E5%86%85%E6%A0%B8%E7%9A%84-Jupyter-Notebook-Docker-%E9%95%9C%E5%83%8F/"/>
      <url>/2018/08/17/%E6%89%93%E9%80%A0%E5%B8%A6-Java-%E5%86%85%E6%A0%B8%E7%9A%84-Jupyter-Notebook-Docker-%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用过 Python 的应该都用过 <a href="http://jupyter.org/" target="_blank" rel="noopener">Jupyter</a>。简单来说，Jupyter 是一个写文档的工具，写出来的文档里面包含可以直接运行的代码。Jupyter 主要用于数据分析和机器学习，所以默认支持的语言是 Python 和 R 之类的。对于 Java 开发者来说，由于 JDK9 开始终于有了名为 JShell 的 PREL，再加上热心大神开发了对应的内核，我们也可以自己动手打造一个可以运行 Java 代码的 Jupyter。</p></blockquote><p>Jupyter 是一个 Web 应用，所以我最终的目的是要打造一个 Docker 镜像。这样就可以方便的部署到云上，以后找个能上网的设备就可以随时写代码了。</p><h2 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h2><ul><li><strong>Docker</strong>，官方安装教程地址: <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">https://docs.docker.com/install/</a> 。</li></ul><a id="more"></a><h2 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h2><h3 id="编写-Dockerfile-文件"><a href="#编写-Dockerfile-文件" class="headerlink" title="编写 Dockerfile 文件"></a>编写 Dockerfile 文件</h3><p>新建 <code>Dockerfile</code> 文件，并输入以下内容：</p><figure class="hljs highlight Dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 选用官方 minimal 版本镜像作为基底</span><br><span class="hljs-keyword">FROM</span> jupyter/minimal-notebook<br><br><span class="hljs-comment"># 以下操作需要 root 权限</span><br><span class="hljs-keyword">USER</span> root<br><br><span class="hljs-comment"># Java 内核要求 JDK 版本不小于 9</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -yq openjdk-11-jdk<br></span><br><span class="hljs-comment"># 安装 Java 内核，最新版本 v1.1.1</span><br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir -p /tmp/ijava &amp;&amp; \<br>    <span class="hljs-built_in">cd</span> /tmp/ijava &amp;&amp; \<br>    wget https://github.com/SpencerPark/IJava/releases/download/v1.1.1/ijava-1.1.1.zip &amp;&amp; \<br>    unzip ijava-1.1.1.zip &amp;&amp; \<br>    python install.py --sys-prefix &amp;&amp; \<br>    rm /tmp/ijava -r</span><br></code></pre></td></tr></table></figure><p>Jupyter 有自己的<a href="https://github.com/jupyter/docker-stacks" target="_blank" rel="noopener">官方 Docker 镜像</a>，分 base, minimal, scipy, r, tensorflow, datascience, pyspark 和 all-spark 8 个版本。其中除了 base 和 minimal，其它都是在 minimal 的基础上针对不同用途添加对应的库制作而成的。这里出于简化和最小化的目的，选用 minimal 作为基础镜像进行制作。</p><p>由于 JDK9 开始才支持 PERL，所以 Java 内核要求 JDK 版本不小于 9。官方镜像用的都是 Ubuntu 的 Linux 镜像，而且最新的镜像都已经上 18.04 的版本。所以这里直接用 <code>apt</code> 安装最新的 <code>openjdk-11-jdk</code>。</p><blockquote><p>虽然名字是 <code>openjdk-11-jdk</code>，但通过 <code>java -version</code> 可以看到还是 JDK10。</p></blockquote><p>Jupyter 官方没有出 Java 内核，这里用到官方推荐的第三方内核 <a href="https://github.com/SpencerPark/IJava" target="_blank" rel="noopener">IJava</a></p><h3 id="制作-Docker-镜像"><a href="#制作-Docker-镜像" class="headerlink" title="制作 Docker 镜像"></a>制作 Docker 镜像</h3><p>这 <code>Dockerfile</code> 所在的文件夹运行以下指令:</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker image build -t tuzkimo/jupyter-java .<br></code></pre></td></tr></table></figure><p>-t 用于指定 Docker 镜像的标签名，大家可以改用自己喜欢的名字。不要忘了指令最后是有一个点的。</p><h3 id="运行-Docker-镜像实例"><a href="#运行-Docker-镜像实例" class="headerlink" title="运行 Docker 镜像实例"></a>运行 Docker 镜像实例</h3><p>个人比较喜欢用 <code>docker-compose</code> 运行 Docker 镜像，就算只是一个单独的服务。</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">'2'</span><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">    jupyter-java:</span><br><span class="hljs-attr">        container_name:</span> <span class="hljs-string">jupyter-java</span><br><span class="hljs-attr">        image:</span> <span class="hljs-string">tuzkimo/jupyter-java</span><br><span class="hljs-attr">        ports:</span><br><span class="hljs-bullet">            -</span> <span class="hljs-number">8888</span><span class="hljs-string">:8888</span><br><span class="hljs-attr">        volumes:</span><br><span class="hljs-bullet">            -</span> <span class="hljs-string">./work:/home/jovyan/work</span><br><span class="hljs-attr">        command:</span> <span class="hljs-string">&gt;<br>            start-notebook.sh<br>            --NotebookApp.password='sha1:772f104e6c00:fd76619ae92f722866127bb59f64d9b8702385b0'<br></span><span class="hljs-attr">        restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>这里我用到入口程序的 <code>--NotebookApp.password</code> 参数直接设定登录密码。这里用到的是加密而且散列处理后的密码，准备密码的方法可以点<a href="https://jupyter-notebook.readthedocs.io/en/stable/public_server.html#preparing-a-hashed-password" target="_blank" rel="noopener">这里</a>看官方文档。</p><p>最后输入以下指令运行镜像：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker-compose up -d<br></code></pre></td></tr></table></figure><p>我们打开浏览器访问 <code>http://localhost:8888</code>，如果看到登录窗代表运行成功，输入设定好的密码就可以愉快使用了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://s1.ax1x.com/2018/08/20/Ph4F6f.png" alt=""></p><p>效果还是不错的。:)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jupyter </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Spotify Docker Maven 插件快速生成 Spring Boot 应用的 Docker 镜像</title>
      <link href="/2018/08/15/Spotifys-Docker-Maven-%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90-Spring-Boot-%E5%BA%94%E7%94%A8%E7%9A%84-Docker-%E9%95%9C%E5%83%8F/"/>
      <url>/2018/08/15/Spotifys-Docker-Maven-%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90-Spring-Boot-%E5%BA%94%E7%94%A8%E7%9A%84-Docker-%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot 是为云开发而生的，而现在云开发的部署方式基本上都是以 Docker 镜像为载体。用 <a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="noopener">Spotify’s Docker Maven 插件</a> 可以快速生成 Spring Boot 应用的 Docker 镜像，提高开发效率。下面是一个简单的例子。</p></blockquote><h2 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h2><ul><li><strong>Docker</strong>，要生成 Docker 镜像要现在本地安装 Docker 软件，官方有十分详细的安装教程，地址是: <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">https://docs.docker.com/install/</a>;</li><li><strong>Maven</strong>，Spotify’s Docker Maven 插件看名字就知道是一个 Maven 插件，所以本地还要先安装一个 Maven，官方安装教程地址是: <a href="https://maven.apache.org/install.html" target="_blank" rel="noopener">https://maven.apache.org/install.html</a> 。</li></ul><h2 id="准备-Spring-Boot-应用"><a href="#准备-Spring-Boot-应用" class="headerlink" title="准备 Spring Boot 应用"></a>准备 Spring Boot 应用</h2><p>出于简化的目的，这里就直接用 Spring 官方的 <a href="http://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">Hello World</a> 项目。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> git@ugithub.com:spring-guides/gs-rest-service.git<br></code></pre></td></tr></table></figure><p>项目克隆完毕后，用 IDE 打开 <code>gs-rest-service/complete/pom.xml</code> 载入 Maven 项目。</p><a id="more"></a><h2 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h2><p>我们最终的目的是可以实现用以下一行指令自动完成项目的测试、打包和 Docker 镜像生成。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ mvn clean package docker:build<br></code></pre></td></tr></table></figure><h3 id="配置-Spotify’s-Docker-Maven-插件"><a href="#配置-Spotify’s-Docker-Maven-插件" class="headerlink" title="配置 Spotify’s Docker Maven 插件"></a>配置 Spotify’s Docker Maven 插件</h3><p>在 <code>pom.xml</code> 中添加以下内容。</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml">...<br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.name</span>&gt;</span>tuzkimo/hello-world-rest-docker<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.tag</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.tag</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>...<br><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><br>    ...<br><br>    <span class="hljs-comment">&lt;!--用 resources 插件把 docker 目录下的文件复制到 target/dockerfile 目录下--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-resources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>validate<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-resources<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target/dockerfile<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/docker<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--<br>    1. 每一个生成的的 Docker 镜像都有一个对应的 tag。Spotify 插件会根据 $&#123;docker.image.tag&#125; 命名 tag；<br>    2. Docker 镜像是根据 Dockerfile 文件生成的。里面通过一行一行详细的镜像生成指令；<br>    3. 当 Spotify 插件运行，它会复制生成的 Jar 包到 Docker 镜像里面<br>    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span><br>                $&#123;docker.image.name&#125;:$&#123;docker.image.tag&#125;    <span class="hljs-comment">&lt;!--1--&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dockerDirectory</span>&gt;</span><br>                $&#123;basedir&#125;/target/dockerfile    <span class="hljs-comment">&lt;!--2--&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dockerDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-comment">&lt;!--3--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><br>...<br></code></pre></td></tr></table></figure><h3 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h3><p>在 <code>src/main</code> 目录下面新建一个子目录 <code>docker</code>，然后在里面新建 <code>Dockerfile</code> 文件，内容如下：</p><figure class="hljs highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># alpine 是一个很小的常用于构建 Docker 镜像的 Linux Docker 镜像，这个版本已经预装了 JDK 8</span><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine<br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir -p /usr/<span class="hljs-built_in">local</span>/helloworld<br></span><span class="hljs-comment"># ADD 指令把本地生成的 JAR 包复制到 Docker 镜像</span><br><span class="hljs-keyword">ADD</span><span class="bash"> @project.build.finalName@.jar /usr/<span class="hljs-built_in">local</span>/helloworld/<br></span><span class="hljs-comment"># 这里再添加一个自定义的 BASH shell script，用来控制服务的运行</span><br><span class="hljs-keyword">ADD</span><span class="bash"> run.sh run.sh<br></span><span class="hljs-keyword">RUN</span><span class="bash"> chmod +x run.sh<br></span><span class="hljs-keyword">CMD</span><span class="bash"> ./run.sh</span><br></code></pre></td></tr></table></figure><h3 id="编写入口程序"><a href="#编写入口程序" class="headerlink" title="编写入口程序"></a>编写入口程序</h3><p>在 <code>docker</code> 目录新建 <code>run.sh</code> 文件，内容如下：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh<br></span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"********************************************************"</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"Starting Hello World Service"</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"********************************************************"</span><br><span class="hljs-comment"># $&lt;&lt;变量名&gt;&gt; 代表传入 Docker 镜像的环境变量</span><br>java -Dspring.profiles.active=<span class="hljs-variable">$PROFILE</span> \<br>     -jar /usr/<span class="hljs-built_in">local</span>/helloworld/@project.build.finalName@.jar<br></code></pre></td></tr></table></figure><h3 id="用-docker-compose-控制服务运行"><a href="#用-docker-compose-控制服务运行" class="headerlink" title="用 docker-compose 控制服务运行"></a>用 docker-compose 控制服务运行</h3><p>在项目根目录新建 <code>docker-compose.yml</code> 文件，内容如下：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">'2'</span><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">    helloworld:</span>    <span class="hljs-comment"># 这是服务对应的名字，docker 实例运行后，这就会成为 DNS 记录，方便别的服务访问</span><br><span class="hljs-attr">        image:</span> <span class="hljs-string">tuzkimo/hello-world-rest-docker:demo</span>    <span class="hljs-comment"># docker-compose 首先会在本地仓库寻找镜像，找不到就到 Docker hub (http://hub.docker.com) 寻找</span><br><span class="hljs-attr">        ports:</span><br><span class="hljs-bullet">            -</span> <span class="hljs-string">"8080:8080"</span>   <span class="hljs-comment"># ports 指令把镜像内部的端口映射到外部对应的端口，冒号前是外部端口，冒号后是内部端口</span><br><span class="hljs-attr">        environment:</span><br><span class="hljs-attr">            PROFILE:</span> <span class="hljs-string">"default"</span>    <span class="hljs-comment"># environment 指令用于传入环境变量，这里 PROFILE 变量用于控制配置参数的版本</span><br></code></pre></td></tr></table></figure><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><h3 id="构建-Docker-镜像"><a href="#构建-Docker-镜像" class="headerlink" title="构建 Docker 镜像"></a>构建 Docker 镜像</h3><p><code>Terminal</code> 切换到项目根目录，输入下面指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ mvn clean package docker:build<br></code></pre></td></tr></table></figure><p>一切顺利可以看到如下构建成功信息：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">Successfully built 19a0fb902f5d<br>Successfully tagged tuzkimo/hello-world-rest-docker:demo<br>[INFO] Built tuzkimo/hello-world-rest-docker:demo<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time: 14.960 s<br>[INFO] Finished at: 2018-08-15T10:36:00+08:00<br>[INFO] Final Memory: 54M/380M<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><h3 id="用-docker-compose-运行-docker-实例"><a href="#用-docker-compose-运行-docker-实例" class="headerlink" title="用 docker-compose 运行 docker 实例"></a>用 docker-compose 运行 docker 实例</h3><p><code>Terminal</code> 切换到项目根目录，输入下面指令：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker-compose up<br></code></pre></td></tr></table></figure><p>运行成功可以看到类似如下信息：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">Recreating complete_helloworld_1 ... <span class="hljs-keyword">done</span><br>Attaching to complete_helloworld_1<br>helloworld_1  | ********************************************************<br>helloworld_1  | Starting Hello World Service<br>helloworld_1  | ********************************************************<br><br>...<br><br>helloworld_1  | 2018-08-15 02:42:06.193  INFO 7 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path <span class="hljs-string">''</span><br>helloworld_1  | 2018-08-15 02:42:06.199  INFO 7 --- [           main] hello.Application                        : Started Application <span class="hljs-keyword">in</span> 4.308 seconds (JVM running <span class="hljs-keyword">for</span> 5.089)<br></code></pre></td></tr></table></figure><h3 id="访问-API"><a href="#访问-API" class="headerlink" title="访问 API"></a>访问 API</h3><p>这时候就可以试着访问项目的 API 了：</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl http://localhost:8080/greeting<br><span class="hljs-comment"># =&gt; &#123;"id":1,"content":"Hello, World!"&#125;</span><br><br>$ curl http://localhost:8080/greeting?name=tuzkimo<br><span class="hljs-comment"># =&gt; &#123;"id":2,"content":"Hello, tuzkimo!"&#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人感觉 Docker 是一个超伟大的发明，配合 CI/CD 绝对可以挽救很多生命。 :)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.manning.com/books/spring-microservices-in-action" target="_blank" rel="noopener">Carnell,J.(2017).<em>Spring Microservices in Action</em></a></li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/tuzkimo/spring-boot-hello-world-docker-demo" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://gitee.com/tuzkimo/spring-boot-hello-world-docker-demo" target="_blank" rel="noopener">码云</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Zeal 快速查询 API 文档</title>
      <link href="/2018/08/08/%E7%94%A8-Zeal-%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2-API-%E6%96%87%E6%A1%A3/"/>
      <url>/2018/08/08/%E7%94%A8-Zeal-%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2-API-%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于程序员来说，每天的工作总少不了查询 API 文档，一款好用的离线 API 文档查询工具可以有效的提升开发效率。MAC/iOS 平台有著名的 <a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a>，可惜不是跨平台而且不是开源免费的。还好的是还有一款开源免费的支持 Win/Linux 平台的替代品 - <a href="https://zealdocs.org/" target="_blank" rel="noopener">Zeal</a>。</p></blockquote><p>Zeal 跟 Dash 基本上一模一样，都是离线查询，都支持 IDE 集成，用的是一样的数据源。对于想我一样吃不起苹果的穷 B 程序狗简直就是福音。 :)</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>登录主页 <a href="https://zealdocs.org/" target="_blank" rel="noopener">https://zealdocs.org/</a> ，根据自己的操作系统选择对应的安装包下载安装即可。</p><p><img src="https://s1.ax1x.com/2018/08/08/PsHSgg.png" alt=""></p><a id="more"></a><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="下载离线文档"><a href="#下载离线文档" class="headerlink" title="下载离线文档"></a>下载离线文档</h3><p>点击 <code>Tools</code> -&gt; <code>Docset...</code> -&gt; <code>Available</code>，在列表中选择需要的开发语言或库的名字，点击 <code>Download</code> 即可。</p><p><img src="https://s1.ax1x.com/2018/08/08/PsHnv4.png" alt=""></p><h3 id="快速查询"><a href="#快速查询" class="headerlink" title="快速查询"></a>快速查询</h3><p>在左上角的输入框内输入要查询的关键字即可，例如 <code>date</code>。如果想指定某一个语言或库，加上该语言或库的名字和冒号作为前缀即可，例如 <code>javascript:date</code>。</p><p><img src="https://s1.ax1x.com/2018/08/08/PsHDat.png" alt=""></p><h3 id="IDE-集成"><a href="#IDE-集成" class="headerlink" title="IDE 集成"></a>IDE 集成</h3><p>登录 <a href="https://zealdocs.org/usage.html" target="_blank" rel="noopener">https://zealdocs.org/usage.html</a> ，找到对应 IDE 的插件下载地址，下载安装即可。</p><p><img src="https://s1.ax1x.com/2018/08/08/PsHRMQ.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zealdocs.org/usage.html" target="_blank" rel="noopener">官方使用文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Spring Boot CLI 快速构建 Spring Boot 项目</title>
      <link href="/2018/08/06/%E7%94%A8-Spring-Boot-CLI-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA-Spring-Boot-%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/08/06/%E7%94%A8-Spring-Boot-CLI-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA-Spring-Boot-%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前介绍过用 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializer</a> 来快速构建 Spring Boot 项目，今天向大家介绍另一款官方的命令行脚手架工具 - Spring Boot CLI。</p></blockquote><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>Spring Boot CLI 有多种安装方式，下面介绍的是用 <a href="http://sdkman.io/" target="_blank" rel="noopener">SDKMAN!</a> 安装的方法，操作系统是 Dedian 8。SDKMAN! 是一个很好用的开发包管理工具，以后有机会会向大家单独介绍。</p><h3 id="安装-SDKMAN"><a href="#安装-SDKMAN" class="headerlink" title="安装 SDKMAN!"></a>安装 SDKMAN!</h3><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ curl -s <span class="hljs-string">"https://get.sdkman.io"</span> | bash<br>$ <span class="hljs-built_in">source</span> <span class="hljs-string">"<span class="hljs-variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span><br>$ sdk version    <span class="hljs-comment"># 正常显示版本信息表示安装成功</span><br></code></pre></td></tr></table></figure><blockquote><p>如果报 <code>INTERNET NOT REACHABLE!</code> 错误，说明你需要一个梯子。 :)</p></blockquote><h3 id="安装-Spring-Boot-CLI"><a href="#安装-Spring-Boot-CLI" class="headerlink" title="安装 Spring Boot CLI"></a>安装 Spring Boot CLI</h3><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sdk install springboot<br>$ spring --version    <span class="hljs-comment"># 正常显示版本信息表示安装成功</span><br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p>Spring Boot CLI 有很多功能，这里只介绍新建 Spring Boot 项目的功能。</p><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看所有功能</span><br>$ spring --<span class="hljs-built_in">help</span><br><br><span class="hljs-comment"># 按默认配置新建项目</span><br>$ spring init<br><br><span class="hljs-comment"># spring init 使用帮助</span><br>$ spring <span class="hljs-built_in">help</span> init<br><br><span class="hljs-comment"># 新建一个包含 Web 开发相关依赖的项目并打包成名为 my-app.zip 的压缩包</span><br>$ spring init -d=web my-app.zip<br><br><span class="hljs-comment"># 新建一个包含 Web 和 JPA 相关依赖，使用 Gradle 进行项目管理的项目，并解压到名为 my-dir 的目录</span><br>$ spring init -d=web,jpa --build=gradle my-dir<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你跟我一样更加偏爱使用命令行，Spring Boot CLI 相对 Spring Initializer 会是更好的选择。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli" target="_blank" rel="noopener">Spring Boot CLI 官方文档</a></li><li><a href="https://sdkman.io/install" target="_blank" rel="noopener">SDKMAN! 官方安装文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Moment.js 处理日期时间</title>
      <link href="/2018/08/03/%E7%94%A8-Moment-js-%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2018/08/03/%E7%94%A8-Moment-js-%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaScript 原生处理日期时间的能力比较弱，例如经常要用的格式化功能就没有专门的 API 处理，所以，今天要向大家介绍一个超级好用的日期时间处理的库 <a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js</a>。</p></blockquote><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># NPM</span><br>$ npm install moment --save<br><br><span class="hljs-comment"># NPM 淘宝源</span><br>$ cnpm install moment --save<br><br><span class="hljs-comment"># Yarn</span><br>$ yarn add moment<br></code></pre></td></tr></table></figure><h2 id="引入方法"><a href="#引入方法" class="headerlink" title="引入方法"></a>引入方法</h2><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">'moment'</span><br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><h3 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> now = moment()<br></code></pre></td></tr></table></figure><h3 id="解释字符串"><a href="#解释字符串" class="headerlink" title="解释字符串"></a>解释字符串</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> date = moment(<span class="hljs-string">'2018-08-03'</span>)<br><span class="hljs-keyword">const</span> datetime = moment(<span class="hljs-string">'2018-08-03 16:45:26'</span>)<br><span class="hljs-keyword">const</span> date = moment(<span class="hljs-string">'08-03-2018'</span>, <span class="hljs-string">'MM-DD-YYYY'</span>)    <span class="hljs-comment">// 指定字符串解释格式</span><br></code></pre></td></tr></table></figure><h3 id="格式化日期时间"><a href="#格式化日期时间" class="headerlink" title="格式化日期时间"></a>格式化日期时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.format(<span class="hljs-string">'YYYY-MM-DD HH-mm-ss'</span>)    <span class="hljs-comment">// 2018-08-03 16:45:26</span><br>moment.format(<span class="hljs-string">'dddd'</span>)    <span class="hljs-comment">// Friday</span><br></code></pre></td></tr></table></figure><h3 id="计算相对时间"><a href="#计算相对时间" class="headerlink" title="计算相对时间"></a>计算相对时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">moment(<span class="hljs-string">'2012'</span>, <span class="hljs-string">'YYYY'</span>).fromNow()    <span class="hljs-comment">// 6 years ago</span><br>moment().startOf(<span class="hljs-string">'day'</span>).fromNow()    <span class="hljs-comment">// 17 hours ago</span><br>moment().endOf(<span class="hljs-string">'day'</span>).fromNow()    <span class="hljs-comment">// in 7 hours</span><br></code></pre></td></tr></table></figure><h3 id="增减日期时间"><a href="#增减日期时间" class="headerlink" title="增减日期时间"></a>增减日期时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">moment().add(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>)<br>moment().add(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>).add(<span class="hljs-number">1</span>, <span class="hljs-string">'months'</span>)<br>moment().add(&#123;<span class="hljs-attr">days</span>:<span class="hljs-number">7</span>,<span class="hljs-attr">months</span>:<span class="hljs-number">1</span>&#125;)<br>moment().subtract(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>)<br>moment().subtract(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>).add(<span class="hljs-number">1</span>, <span class="hljs-string">'months'</span>)<br>moment().subtract(&#123;<span class="hljs-attr">days</span>:<span class="hljs-number">7</span>,<span class="hljs-attr">months</span>:<span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.locale(<span class="hljs-string">'zh-cn'</span>)    <span class="hljs-comment">// 切换中文</span><br>moment().format(<span class="hljs-string">'ll'</span>)    <span class="hljs-comment">// 2018年8月3日</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Moment.js 的功能十分强大，上面只是很少一部分常用的功能，具体可以上官网 <a href="https://momentjs.com/" target="_blank" rel="noopener">https://momentjs.com/</a> 看，不喜欢看英文的小伙伴还可以看中文官网 <a href="http://momentjs.cn/，就是版本旧了一些。" target="_blank" rel="noopener">http://momentjs.cn/，就是版本旧了一些。</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js 官网</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Spring Initializer 快速构建 Spring Boot 项目</title>
      <link href="/2018/08/02/%E7%94%A8-Spring-Initializer-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA-Spring-Boot-%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/08/02/%E7%94%A8-Spring-Initializer-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA-Spring-Boot-%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在没有 Spring Boot 以前，构建一个 Spring 项目要花很多时间在配置上，自从有了 Spring Boot，配合官方的脚手架工具，构建一个 Spring 项目就是瞬间的事情，今天要介绍的就是其中一个最容易用的 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializer</a>。</p></blockquote><p><img src="https://s1.ax1x.com/2018/08/02/P0GsKS.png" alt=""></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Spring Initializer 是一个在线工具，浏览器直接访问 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 就可以用了。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><strong>选择项目管理工具</strong>，支持 <a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a> 和 <a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a>，默认 Maven；</li><li><strong>选择开发语言</strong>，支持 Java、Kotlin 和 Groovy，默认 Java；</li><li><strong>选择 Spring Boot 版本</strong>，默认最新的正式版本；</li><li><strong>输入 Group</strong>；</li><li><strong>输入 Artifact</strong>；</li><li><strong>选择依赖包</strong>，在旁边的搜索框可以快速凭关键字选择需要的依赖包；</li><li><strong>点击 Generate…</strong>，就会生成一个打包好的项目压缩包，解压用 IDE 打开就可以了。</li></ol><p>如果想做更多的配置，点击 <strong><code>Switch to the full version</code></strong> 可以进入高级模式。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0JDiR.png" alt=""></p><p>这样就可以看到更多的配置项了，例如打包方式（支持 Jar 和 War，默认是 Jar）和 JDK 版本。往下拉还可以看到全部支持的依赖包列表，这样就可以更直观地勾选了。</p><p>列表太长就不截图了，说明了很多依赖包都有官方的 Spring Boot 适配版本了，Spring 社区还是一如既往的省心啊。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 FileSaver.js 实现客户端文件保存功能</title>
      <link href="/2018/08/01/%E7%94%A8-FileSaver-js-%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/08/01/%E7%94%A8-FileSaver-js-%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在做前端开发的时候需要实现文件下载功能，秉着不重复开发的理念，找到了一个十分方便的库，就是今天想向大家介绍的 <a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.js</a>。</p></blockquote><p>据开发者 <a href="https://eligrey.com/" target="_blank" rel="noopener">Eli Grey</a> 的<a href="https://eligrey.com/blog/saving-generated-files-on-the-client-side/" target="_blank" rel="noopener">博文</a>的说法，原本 W3C 在制定 HTML5 的时候原本是包含 <code>saveAs()</code> 这个 File API 的，但后来又放弃了，还好作者自己实现了一个，才有现在的 FileSaver.js。</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># NPM</span><br>$ npm install file-saver --save<br><br><span class="hljs-comment"># NPM 淘宝源</span><br>$ cnpm install file-saver --save<br><br><span class="hljs-comment"># Bower</span><br>$ bower install file-saver<br></code></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">FileSaver saveAs(Blob/File data, optional DOMString filename, optional Boolean disableAutoBOM)<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入方法</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存文本</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><br><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([<span class="hljs-string">"Hello, world!"</span>], &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain;charset=utf-8"</span>&#125;)<br>saveAs(blob, <span class="hljs-string">"hello world.txt"</span>)<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存 Canvas</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><br><span class="hljs-keyword">let</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"my-canvas"</span>)<br><span class="hljs-keyword">let</span> context = canvas.getContext(<span class="hljs-string">"2d"</span>)<br><br><span class="hljs-comment">// 省略绘图代码..</span><br><br>canvas.toBlob(<span class="hljs-function"><span class="hljs-params">blob</span> =&gt;</span> saveAs(blob, <span class="hljs-string">"image.png"</span>))<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存文件</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><br><span class="hljs-keyword">const</span> file = <span class="hljs-keyword">new</span> File([<span class="hljs-string">"Hello, world!"</span>], <span class="hljs-string">"hello world.txt"</span>, &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain;charset=utf-8"</span>&#125;)<br>saveAs(file)<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 下载文件</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><br><br><span class="hljs-keyword">const</span> downloadUrl = <span class="hljs-string">"https://api.example.com/v1/download/hello-world.txt"</span><br><br>axios.get(downloadUrl, &#123;<br>    <span class="hljs-attr">responseType</span>: <span class="hljs-string">'blob'</span><br>  &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    saveAs(response.data, <span class="hljs-string">"hello world.txt"</span>)<br>  &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error.message || <span class="hljs-string">'download failed.'</span>)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://eligrey.com/blog/saving-generated-files-on-the-client-side/" target="_blank" rel="noopener">Saving generated files on the client-side</a></li><li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.js</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 alternativeTo 寻找替换软件</title>
      <link href="/2018/07/31/%E7%94%A8-alternativeTo-%E5%AF%BB%E6%89%BE%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6/"/>
      <url>/2018/07/31/%E7%94%A8-alternativeTo-%E5%AF%BB%E6%89%BE%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不知道大家有没有这样的烦恼，在网上看到别人推荐的好软件，然后发现有要收费的、有 Mac/iOS 平台独占的，然后就想如果有类似的替代产品就好了。不经意间发现的 <a href="https://alternativeto.net/" target="_blank" rel="noopener">alternativeTo</a> 完全满足了我的需求。</p></blockquote><p><img src="https://s1.ax1x.com/2018/07/31/Pdz2IP.png" alt=""></p><a id="more"></a><p>alternativeTo 是一个网页应用，使用非常的简单，直接用浏览器访问 <a href="https://alternativeto.net/" target="_blank" rel="noopener">https://alternativeto.net/</a> ，在右上角的搜索框输入被替代的软件的文字，就会列出推荐的软件。</p><p>例如之前想找 <a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a> 的替代软件，一搜，<a href="https://zealdocs.org/" target="_blank" rel="noopener">Zeal</a> 妥妥的排第一。</p><p><img src="https://s1.ax1x.com/2018/07/31/PwSKeA.png" alt=""></p><p>结果列表默认按受欢迎程度排序，基本上排第一的都不坑。列表还提供了按平台、授权方式或标签筛选的功能，某些结果还会有热心群众的评论，可以给你更充分的参考意见。</p><p>当然了，如果你也是热心群众，就注册个账号发表你的高见吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
