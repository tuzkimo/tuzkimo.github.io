<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>用 Moment.js 处理日期时间</title>
      <link href="/2018/08/03/%E7%94%A8-Moment-js-%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2018/08/03/%E7%94%A8-Moment-js-%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<blockquote><p>JavaScript 原生处理日期时间的能力比较弱，例如经常要用的格式化功能就没有专门的 API 处理，所以，今天要向大家介绍一个超级好用的日期时间处理的库 <a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js</a>。</p></blockquote><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># NPM</span><br>$ npm install moment --save<br><br><span class="hljs-comment"># NPM 淘宝源</span><br>$ cnpm install moment --save<br><br><span class="hljs-comment"># Yarn</span><br>$ yarn add moment<br></code></pre></td></tr></table></figure><h2 id="引入方法"><a href="#引入方法" class="headerlink" title="引入方法"></a>引入方法</h2><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">'moment'</span><br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><h3 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> now = moment()<br></code></pre></td></tr></table></figure><h3 id="解释字符串"><a href="#解释字符串" class="headerlink" title="解释字符串"></a>解释字符串</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> date = moment(<span class="hljs-string">'2018-08-03'</span>)<br><span class="hljs-keyword">const</span> datetime = moment(<span class="hljs-string">'2018-08-03 16:45:26'</span>)<br><span class="hljs-keyword">const</span> date = moment(<span class="hljs-string">'08-03-2018'</span>, <span class="hljs-string">'MM-DD-YYYY'</span>)    <span class="hljs-comment">// 指定字符串解释格式</span><br></code></pre></td></tr></table></figure><h3 id="格式化日期时间"><a href="#格式化日期时间" class="headerlink" title="格式化日期时间"></a>格式化日期时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.format(<span class="hljs-string">'YYYY-MM-DD HH-mm-ss'</span>)    <span class="hljs-comment">// 2018-08-03 16:45:26</span><br>moment.format(<span class="hljs-string">'dddd'</span>)    <span class="hljs-comment">// Friday</span><br></code></pre></td></tr></table></figure><h3 id="计算相对时间"><a href="#计算相对时间" class="headerlink" title="计算相对时间"></a>计算相对时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">moment(<span class="hljs-string">'2012'</span>, <span class="hljs-string">'YYYY'</span>).fromNow()    <span class="hljs-comment">// 6 years ago</span><br>moment().startOf(<span class="hljs-string">'day'</span>).fromNow()    <span class="hljs-comment">// 17 hours ago</span><br>moment().endOf(<span class="hljs-string">'day'</span>).fromNow()    <span class="hljs-comment">// in 7 hours</span><br></code></pre></td></tr></table></figure><h3 id="增减日期时间"><a href="#增减日期时间" class="headerlink" title="增减日期时间"></a>增减日期时间</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">moment().add(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>)<br>moment().add(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>).add(<span class="hljs-number">1</span>, <span class="hljs-string">'months'</span>)<br>moment().add(&#123;<span class="hljs-attr">days</span>:<span class="hljs-number">7</span>,<span class="hljs-attr">months</span>:<span class="hljs-number">1</span>&#125;)<br>moment().subtract(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>)<br>moment().subtract(<span class="hljs-number">7</span>, <span class="hljs-string">'days'</span>).add(<span class="hljs-number">1</span>, <span class="hljs-string">'months'</span>)<br>moment().subtract(&#123;<span class="hljs-attr">days</span>:<span class="hljs-number">7</span>,<span class="hljs-attr">months</span>:<span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h3><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">moment.locale(<span class="hljs-string">'zh-cn'</span>)    <span class="hljs-comment">// 切换中文</span><br>moment().format(<span class="hljs-string">'ll'</span>)    <span class="hljs-comment">// 2018年8月3日</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Moment.js 的功能十分强大，上面只是很少一部分常用的功能，具体可以上官网 <a href="https://momentjs.com/" target="_blank" rel="noopener">https://momentjs.com/</a> 看，不喜欢看英文的小伙伴还可以看中文官网 <a href="http://momentjs.cn/，就是版本旧了一些。" target="_blank" rel="noopener">http://momentjs.cn/，就是版本旧了一些。</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js 官网</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Spring Initializer 快速构建 Spring Boot 项目</title>
      <link href="/2018/08/02/%E7%94%A8-Spring-Initializer-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA-Spring-Boot-%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/08/02/%E7%94%A8-Spring-Initializer-%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA-Spring-Boot-%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>在没有 Spring Boot 以前，构建一个 Spring 项目要花很多时间在配置上，自从有了 Spring Boot，配合官方的脚手架工具，构建一个 Spring 项目就是瞬间的事情，今天要介绍的就是其中一个最容易用的 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializer</a>。</p></blockquote><p><img src="https://s1.ax1x.com/2018/08/02/P0GsKS.png" alt=""></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Spring Initializer 是一个在线工具，浏览器直接访问 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 就可以用了。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><strong>选择项目管理工具</strong>，支持 <a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a> 和 <a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a>，默认 Maven；</li><li><strong>选择开发语言</strong>，支持 Java、Kotlin 和 Groovy，默认 Java；</li><li><strong>选择 Spring Boot 版本</strong>，默认最新的正式版本；</li><li><strong>输入 Group</strong>；</li><li><strong>输入 Artifact</strong>；</li><li><strong>选择依赖包</strong>，在旁边的搜索框可以快速凭关键字选择需要的依赖包；</li><li><strong>点击 Generate…</strong>，就会生成一个打包好的项目压缩包，解压用 IDE 打开就可以了。</li></ol><p>如果想做更多的配置，点击 <strong><code>Switch to the full version</code></strong> 可以进入高级模式。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0JDiR.png" alt=""></p><p>这样就可以看到更多的配置项了，例如打包方式（支持 Jar 和 War，默认是 Jar）和 JDK 版本。往下拉还可以看到全部支持的依赖包列表，这样就可以更直观地勾选了。</p><p>列表太长就不截图了，说明了很多依赖包都有官方的 Spring Boot 适配版本了，Spring 社区还是一如既往的省心啊。</p>]]></content>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 FileSaver.js 实现客户端文件保存功能</title>
      <link href="/2018/08/01/%E7%94%A8-FileSaver-js-%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/08/01/%E7%94%A8-FileSaver-js-%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<blockquote><p>最近在做前端开发的时候需要实现文件下载功能，秉着不重复开发的理念，找到了一个十分方便的库，就是今天想向大家介绍的 <a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.js</a>。</p></blockquote><p>据开发者 <a href="https://eligrey.com/" target="_blank" rel="noopener">Eli Grey</a> 的<a href="https://eligrey.com/blog/saving-generated-files-on-the-client-side/" target="_blank" rel="noopener">博文</a>的说法，原本 W3C 在制定 HTML5 的时候原本是包含 <code>saveAs()</code> 这个 File API 的，但后来又放弃了，还好作者自己实现了一个，才有现在的 FileSaver.js。</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="hljs highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># NPM</span><br>$ npm install file-saver --save<br><br><span class="hljs-comment"># NPM 淘宝源</span><br>$ cnpm install file-saver --save<br><br><span class="hljs-comment"># Bower</span><br>$ bower install file-saver<br></code></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">FileSaver saveAs(Blob/File data, optional DOMString filename, optional Boolean disableAutoBOM)<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入方法</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存文本</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><br><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([<span class="hljs-string">"Hello, world!"</span>], &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain;charset=utf-8"</span>&#125;)<br>saveAs(blob, <span class="hljs-string">"hello world.txt"</span>)<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存 Canvas</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><br><span class="hljs-keyword">let</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"my-canvas"</span>)<br><span class="hljs-keyword">let</span> context = canvas.getContext(<span class="hljs-string">"2d"</span>)<br><br><span class="hljs-comment">// 省略绘图代码..</span><br><br>canvas.toBlob(<span class="hljs-function"><span class="hljs-params">blob</span> =&gt;</span> saveAs(blob, <span class="hljs-string">"image.png"</span>))<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 保存文件</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><br><span class="hljs-keyword">const</span> file = <span class="hljs-keyword">new</span> File([<span class="hljs-string">"Hello, world!"</span>], <span class="hljs-string">"hello world.txt"</span>, &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain;charset=utf-8"</span>&#125;)<br>saveAs(file)<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 下载文件</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'file-saver/FileSaver'</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><br><br><span class="hljs-keyword">const</span> downloadUrl = <span class="hljs-string">"https://api.example.com/v1/download/hello-world.txt"</span><br><br>axios.get(downloadUrl, &#123;<br>    <span class="hljs-attr">responseType</span>: <span class="hljs-string">'blob'</span><br>  &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    saveAs(response.data, <span class="hljs-string">"hello world.txt"</span>)<br>  &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error.message || <span class="hljs-string">'download failed.'</span>)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://eligrey.com/blog/saving-generated-files-on-the-client-side/" target="_blank" rel="noopener">Saving generated files on the client-side</a></li><li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.js</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 alternativeTo 寻找替换软件</title>
      <link href="/2018/07/31/%E7%94%A8-alternativeTo-%E5%AF%BB%E6%89%BE%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6/"/>
      <url>/2018/07/31/%E7%94%A8-alternativeTo-%E5%AF%BB%E6%89%BE%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote><p>不知道大家有没有这样的烦恼，在网上看到别人推荐的好软件，然后发现有要收费的、有 Mac/iOS 平台独占的，然后就想如果有类似的替代产品就好了。不经意间发现的 <a href="https://alternativeto.net/" target="_blank" rel="noopener">alternativeTo</a> 完全满足了我的需求。</p></blockquote><p><img src="https://s1.ax1x.com/2018/07/31/Pdz2IP.png" alt=""></p><a id="more"></a><p>alternativeTo 是一个网页应用，使用非常的简单，直接用浏览器访问 <a href="https://alternativeto.net/" target="_blank" rel="noopener">https://alternativeto.net/</a> ，在右上角的搜索框输入被替代的软件的文字，就会列出推荐的软件。</p><p>例如之前想找 <a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a> 的替代软件，一搜，<a href="https://zealdocs.org/" target="_blank" rel="noopener">Zeal</a> 妥妥的排第一。</p><p><img src="https://s1.ax1x.com/2018/07/31/PwSKeA.png" alt=""></p><p>结果列表默认按受欢迎程度排序，基本上排第一的都不坑。列表还提供了按平台、授权方式或标签筛选的功能，某些结果还会有热心群众的评论，可以给你更充分的参考意见。</p><p>当然了，如果你也是热心群众，就注册个账号发表你的高见吧。</p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
